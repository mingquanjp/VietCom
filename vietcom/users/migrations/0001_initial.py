# Generated by Django 4.2.1 on 2025-08-11 08:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(help_text="Số điện thoại phải có định dạng: '+84xxxxxxxxx' hoặc '0xxxxxxxxx'", max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Số điện thoại phải đúng định dạng: '+999999999' hoặc '0999999999'", regex='^\\+?1?\\d{9,15}$')])),
                ('full_name', models.CharField(max_length=100)),
                ('hometown', models.CharField(blank=True, max_length=255)),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Ngày sinh')),
                ('gender', models.CharField(choices=[('male', 'Nam'), ('female', 'Nữ'), ('other', 'Khác'), ('not_specified', 'Không nói')], default='not_specified', help_text='Giới tính của người dùng', max_length=20)),
                ('bio', models.TextField(blank=True, help_text='Giới thiệu ngắn về bản thân (tối đa 500 ký tự)', max_length=500)),
                ('status', models.CharField(choices=[('online', 'Trực tuyến'), ('offline', 'Ngoại tuyến'), ('busy', 'Bận'), ('away', 'Vắng mặt'), ('available', 'Có thể kết nối')], default='offline', help_text='Trạng thái hiện tại', max_length=20)),
                ('interests', models.JSONField(blank=True, default=list)),
                ('avatar', models.ImageField(blank=True, upload_to='avatars/')),
                ('latitude', models.FloatField(blank=True, help_text='Vĩ độ', null=True)),
                ('longitude', models.FloatField(blank=True, help_text='Kinh độ', null=True)),
                ('search_radius', models.FloatField(default=50.0, help_text='Bán kính tìm kiếm (km)')),
                ('level', models.IntegerField(default=1)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Người dùng',
                'verbose_name_plural': 'Người dùng',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
